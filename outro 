#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int partition(int *arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return i + 1;
}

void quicksort(int *arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quicksort(arr, low, pi - 1);
        quicksort(arr, pi + 1, high);
    }
}

// Função recursiva de QuickSort com MPI
void parallel_quicksort(int *arr, int n, int rank, int num_procs, int level) {
    int partner = rank + (1 << level);
    if (partner >= num_procs || n <= 10000) {
        quicksort(arr, 0, n - 1);
        return;
    }

    int pivot = arr[n - 1];
    int i = -1;
    for (int j = 0; j < n - 1; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[n - 1]);

    int mid = i + 1;
    int right_size = n - mid - 1;

    // Envia parte direita para o parceiro
    MPI_Send(&right_size, 1, MPI_INT, partner, 0, MPI_COMM_WORLD);
    MPI_Send(&arr[mid + 1], right_size, MPI_INT, partner, 0, MPI_COMM_WORLD);

    // Ordena parte esquerda localmente (e recursivamente)
    parallel_quicksort(arr, mid + 1, rank, num_procs, level + 1);

    // Recebe parte ordenada do parceiro
    MPI_Recv(&arr[mid + 1], right_size, MPI_INT, partner, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
}

int main(int argc, char *argv[]) {
    int rank, num_procs;
    const int N = 1000000;
    int *arr = NULL;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &num_procs);

    int size;

    if (rank == 0) {
        arr = (int *)malloc(sizeof(int) * N);
        srand(42);
        for (int i = 0; i < N; i++) {
            arr[i] = rand() % 1000000;
        }
        double start = MPI_Wtime();
        parallel_quicksort(arr, N, rank, num_procs, 0);
        double end = MPI_Wtime();
        printf("Tempo MPI QuickSort: %.6f segundos\n", end - start);

        // Verificação simples
        for (int i = 1; i < N; i++) {
            if (arr[i] < arr[i - 1]) {
                printf("Erro na ordenação!\n");
                break;
            }
        }

        free(arr);
    } else {
        MPI_Status status;
        MPI_Recv(&size, 1, MPI_INT, MPI_ANY_SOURCE, 0, MPI_COMM_WORLD, &status);
        int *recv_data = (int *)malloc(size * sizeof(int));
        MPI_Recv(recv_data, size, MPI_INT, status.MPI_SOURCE, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);

        parallel_quicksort(recv_data, size, rank, num_procs, 0);

        MPI_Send(recv_data, size, MPI_INT, status.MPI_SOURCE, 0, MPI_COMM_WORLD);
        free(recv_data);
    }

    MPI_Finalize();
    return 0;
}